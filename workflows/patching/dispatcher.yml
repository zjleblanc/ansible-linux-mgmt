---
- name: Pre-process patch targets and dispatch jobs
  hosts: "{{ patch_targets.keys() | default(omit) }}"
  become: true

  tasks:
    - name: Identify DNF changes
      check_mode: true
      ansible.builtin.dnf:
        name: '*'
        state: latest
        update_cache: true

    - name: Check service status
      ansible.builtin.service_facts:

- name: Dispatch schedules for downstream workflow
  hosts: "{{ patch_targets.keys() | default(omit) }}"
  become: false
  gather_facts: false

  vars:
    # for testing, override with survey
    change_request: CHG01234 # source from ingress (itsm)
    schedule_group_label: "sched_{{ change_request }}"
    change_window_timezone: "{{ patch_targets[inventory_hostname]['change_window_timezone'] }}" # America/Chicago
    change_window_datetime: "{{ patch_targets[inventory_hostname]['change_window_datetime'] }}" # "2025-04-11 11:10:00"
    # for reporting
    # report_server: some_host_in_inventory
    # report_web_directory: /var/www/html

  tasks:
    - name: Create report base
      tags: [reporting]
      delegate_to: "{{ report_server }}"
      run_once: true
      ansible.builtin.template:
        src: templates/report.html.j2
        dest: "{{ report_web_directory }}/{{ change_request }}.html"
        owner: root
        group: root
        mode: "0644"

    - name: Create job status base
      tags: [reporting]
      delegate_to: "{{ report_server }}"
      run_once: true
      ansible.builtin.template:
        src: templates/jobs.csv.j2
        dest: "{{ report_web_directory }}/jobs/{{ change_request }}.csv"
        owner: root
        group: root
        mode: "0644"

    - name: Get current datetime
      ansible.builtin.set_fact:
        current_datetime: "{{ lookup('pipe', 'TZ=\"' + change_window_timezone + '\" date \"+%Y-%m-%d %H:%M:%S\"') }}"

    - name: Assert valid date time for change window
      ansible.builtin.assert:
        that: (change_window_datetime|to_datetime - current_datetime|to_datetime).total_seconds() > 0
        fail_msg: Please ensure that provided date time is in the future

    - name: Prep host metadata
      ansible.builtin.set_fact:
        # Path determination (simple example)
        dispatch_workflow: "rhel{{ ansible_distribution_version.replace('.', '_') }}"
        dispatch_host_metadata:
          _hosts: "{{ inventory_hostname }}"
          version: "{{ ansible_distribution_version }}"
          kernel: "{{ ansible_kernel }}"
          arch: "{{ ansible_architecture  }}"
          change_request: "{{ change_request }}"
          change_window_timezone: "{{ change_window_timezone }}"
          change_window_datetime: "{{ change_window_datetime }}"

    - name: Prep other metadata
      ansible.builtin.set_fact:
        dispatch_other_data:
          report_server: "{{ report_server }}"
          report_web_directory: "{{ report_web_directory }}"
          report_group: "rhel{{ ansible_distribution_version.replace('.', '_') }}"
          aap_gateway_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
          aap_workflow_template_id: "{{ lookup('ansible.controller.controller_api', 'unified_job_templates', query_params={'name': 'Linux // Patching // ' + dispatch_workflow}, expect_one=true).id }}"

    # Mostly for demo purposes; keep env clean
    - name: Delete existing schedule
      delegate_to: localhost
      ansible.controller.schedule:
        name: "Dispatcher Schedule => {{ dispatch_workflow }} on {{ inventory_hostname }}"
        unified_job_template: "Linux // Patching // {{ dispatch_workflow }}"
        state: absent

    - name: Create label
      register: r_label
      delegate_to: localhost
      ansible.controller.label:
        name: "{{ schedule_group_label }}"
        organization: Autodotes

    - name: Create schedule
      register: r_schedule
      delegate_to: localhost
      ansible.controller.schedule:
        name: "Dispatcher Schedule => {{ dispatch_workflow }} on {{ inventory_hostname }}"
        organization: Autodotes
        labels:
          - "{{ schedule_group_label }}"
        unified_job_template: "Linux // Patching // {{ dispatch_workflow }}"
        rrule: "{{ query('awx.awx.schedule_rrule', 'none', start_date=change_window_datetime, timezone=change_window_timezone) }}"
        extra_data: "{{ dispatch_host_metadata | combine(dispatch_other_data) }}"

    - name: Create job status entry
      tags: [reporting]
      delegate_to: "{{ report_server }}"
      throttle: 1 # avoid parallel writes to same file (for better performance consider assemble)
      vars:
        link_schedule: "<a href='{{ dispatch_other_data.aap_gateway_host }}/execution/templates/workflow-job-template/{{ dispatch_other_data.aap_workflow_template_id }}/schedules/{{ r_schedule.id }}/details'>{{ r_schedule.id }}</a>"
      ansible.builtin.lineinfile:
        path: "{{ report_web_directory }}/jobs/{{ change_request }}.csv"
        regexp: '^{{ inventory_hostname }},'
        line: "{{ inventory_hostname }},{{ dispatch_workflow }},{{ link_schedule }},TBD,{{ change_window_datetime }},{{ change_window_timezone }},Scheduled"
